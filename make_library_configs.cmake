function(make_library_configs library_name major minor patch tweak)
    file(WRITE "${PROJECT_BINARY_DIR}/${library_name}-config.cmake"
        "\# This file is for setting configuration variables and options for ${library_name} which get returned\n"
        "\# to the library user via the find_package() CMake function.\n"
        "\n"
        "message(\"ENTERING: ${library_name} configuration file.\")\n"
        "\n"
        "\n"
        "\n"

        # The following block is not needed for anything. It's just an example of what could be in a config file.
        # It's based off of what is in the SDL2 config file.

        #  "\n"
        #  "set(lib_install_prefix \"/usr/lib\")\n"
        #  "\n"
        #  "message(\"Creating user variables...\")\n"
        #  "message(\"setting: ${library_name}_lib_dir\")\n"
        #  "set(${library_name}_lib_dir \"\${lib_install_prefix}/x86_64-linux-gnu\")\n"
        #  "message(\"setting: ${library_name}_include_dir\")\n"
        #  "set(${library_name}_include_dir \"\${lib_install_prefix}/include/${library_name}\")\n"
        #  "message(\"setting: ${library_name}_library\")\n"
        #  "set(${library_name}_library \"${library_name}\")\n"
        #  "\n"

        "message(\"EXITING: ${library_name} configuration file.\")\n"
    )
    file(WRITE "${PROJECT_BINARY_DIR}/${library_name}-config-version.cmake"
        "\# The following notes were taken from the CMake 3.16 documentation and are useful to have on hand here.\n"
        "\n"
        "\# INPUT variables supplied to this file when find_package() loads it.\n"
        "\# PACKAGE_FIND_NAME           -   The <PackageName>\n"
        "\# PACKAGE_FIND_VERSION        -   Full requested version string\n"
        "\# PACKAGE_FIND_VERSION_MAJOR  -   Major version if requested, else 0\n"
        "\# PACKAGE_FIND_VERSION_MINOR  -   Minor version if requested, else 0\n"
        "\# PACKAGE_FIND_VERSION_PATCH  -   Patch version if requested, else 0\n"
        "\# PACKAGE_FIND_VERSION_TWEAK  -   Tweak version if requested, else 0\n"
        "\# PACKAGE_FIND_VERSION_COUNT  -   Number of version components, 0 to 4\n"
        "\n"
        "\# OUTPUT variables given back to CMake's find_package() function.\n"
        "\# PACKAGE_VERSION             -   Full provided version string\n"
        "\# PACKAGE_VERSION_EXACT       -   True if version is exact match\n"
        "\# PACKAGE_VERSION_COMPATIBLE  -   True if version is compatible\n"
        "\# PACKAGE_VERSION_UNSUITABLE  -   True if unsuitable as any version\n"
        "\n"
        "\# OUTPUT variables given back to the project that called find_package().\n"
        "\# The variables report the version of the package that was actually found. The <PackageName> part of their name\n"
        "\# matches the argument given to the find_package() command.\n"
        "\# <PackageName>_VERSION       -   Full provided version string\n"
        "\# <PackageName>_VERSION_MAJOR -   Major version if provided, else 0\n"
        "\# <PackageName>_VERSION_MINOR -   Minor version if provided, else 0\n"
        "\# <PackageName>_VERSION_PATCH -   Patch version if provided, else 0\n"
        "\# <PackageName>_VERSION_TWEAK -   Tweak version if provided, else 0\n"
        "\# <PackageName>_VERSION_COUNT -   Number of version components, 0 to 4\n"
        "\n"
        "message(\"ENTERING: ${library_name} version file.\")\n"
        "\n"
        "\# Useful messages for debugging.\n"
        "message(\"Input variable: PACKAGE_FIND_NAME: \" \${PACKAGE_FIND_NAME})\n"
        "message(\"Input variable: PACKAGE_FIND_VERSION: \" \${PACKAGE_FIND_VERSION})\n"
        "message(\"Input variable: PACKAGE_FIND_VERSION_MAJOR: \" \${PACKAGE_FIND_VERSION_MAJOR})\n"
        "message(\"Input variable: PACKAGE_FIND_VERSION_MINOR: \" \${PACKAGE_FIND_VERSION_MINOR})\n"
        "message(\"Input variable: PACKAGE_FIND_VERSION_PATCH: \" \${PACKAGE_FIND_VERSION_PATCH})\n"
        "message(\"Input variable: PACKAGE_FIND_VERSION_TWEAK: \" \${PACKAGE_FIND_VERSION_TWEAK})\n"
        "message(\"Input variable: PACKAGE_FIND_VERSION_COUNT: \" \${PACKAGE_FIND_VERSION_COUNT})\n"
        "\n"
        "\# Set current version of this install so that find_package() can return useful information, and so that\n"
        "\# comparisons can be done below.\n"
        "set(LIB_VERSION_MAJOR ${major})\n"
        "set(LIB_VERSION_MINOR ${minor})\n"
        "set(LIB_VERSION_PATCH ${patch})\n"
        "set(LIB_VERSION_TWEAK ${tweak})\n"
        "set(PACKAGE_VERSION \${LIB_VERSION_MAJOR}.\${LIB_VERSION_MINOR}.\${LIB_VERSION_PATCH}.\${LIB_VERSION_TWEAK}) # For returning version info.\n"
        "message(\"Library version: \" \${PACKAGE_VERSION})\n"
        "\n"
        "\# Backwards compatibility with previous minor iterations is assumed, but not for newer iterations. Nor is\n"
        "\# any compatibility assumed for any other major versions.\n"
        "\# Compatibility with previous patches and insignificant tweaks is also assumed.\n"
        "set(PACKAGE_VERSION_EXACT false)\n"
        "set(PACKAGE_VERSION_COMPATIBLE false)\n"
        "if (PACKAGE_FIND_VERSION VERSION_EQUAL PACKAGE_VERSION)\n"
        "    set(PACKAGE_VERSION_EXACT true)\n"
        "    set(PACKAGE_VERSION_COMPATIBLE true)\n"
        "elseif(PACKAGE_FIND_VERSION_MAJOR EQUAL LIB_VERSION_MAJOR)\n"
        "    if(PACKAGE_FIND_VERSION_MINOR LESS_EQUAL LIB_VERSION_MINOR)\n"
        "        set(PACKAGE_VERSION_COMPATIBLE true)\n"
        "    endif()\n"
        "endif()\n"
        "\n"
        "message(\"EXITING: ${library_name} version file.\")\n"
    )
endfunction()